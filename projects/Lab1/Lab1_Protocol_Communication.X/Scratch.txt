
    int Protocol_Init(void);
int Protocol_SendMessage(unsigned char len, unsigned char ID, void *Payload);
int Protocol_SendDebugMessage(char *Message);
unsigned char Protocol_ReadNextID(void);
int Protocol_GetPayload(void* payload);
    char Protocol_IsMessageAvailable(void);
    char Protocol_IsQueueFull(void);
char Protocol_IsError(void);
unsigned short Protocol_ShortEndednessConversion(unsigned short inVariable);
unsigned int Protocol_IntEndednessConversion(unsigned int inVariable);
    unsigned char Protocol_CalcIterativeChecksum(unsigned char charIn, unsigned char curChecksum);


void Protocol_RunReceiveStateMachine(unsigned char charIn);







/**
 * This macro initializes all LEDs for use. It enables the proper pins as outputs and also turns all
 * LEDs off.
 */
#define LEDS_INIT() do {LATECLR = 0xFF; TRISECLR = 0xFF;} while (0)

/**
 * Provides a way to quickly get the status of all 8 LEDs into a uint8, where a bit is 1 if the LED
 * is on and 0 if it's not. The LEDs are ordered such that bit 7 is LED8 and bit 0 is LED0.
 */
#define LEDS_GET() (LATE & 0xFF)

/**
 * This macro sets the LEDs on according to which bits are high in the argument. Bit 0 corresponds
 * to LED0.
 * @param leds Set the LEDs to this value where 1 means on and 0 means off.
 */
#define LEDS_SET(leds) do { LATE = (leds); } while (0)

#endif	/* PROTOCOL_H */

